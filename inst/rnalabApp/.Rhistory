sliderInput("g_content", "G mononucleotide longest length:",
min = 0, max = 30, value = c(0, 100)),
sliderInput("c_content", "C mononucleotide longest length:",
min = 0, max = 30, value = c(0, 100))
),
mainPanel(
plotOutput("plot"),
tableOutput("table")
)
)),
tabPanel("Analyse Sequence",
titlePanel("Analyse Sequence"),
sidebarLayout(
sidebarPanel(
actionButton("add_seq", "Add Sequence Properties"),
uiOutput("showColumns"),
uiOutput("updateButton")
),
mainPanel(
tableOutput("table2")
)
)
)
))
server <- function(input, output, session) {
## Factor out the head(cars, input$nrows) so that the code isn't
## duplicated and the operation isn't performed twice for each
## change to input$nrows.
df <- reactive({
min_gc <- input$gccontent[1]
max_gc <- input$gccontent[2]
min_a <- input$a_content[1]
max_a <- input$a_content[2]
min_t <- input$t_content[1]
max_t <- input$t_content[2]
min_g <- input$g_content[1]
max_g <- input$g_content[2]
min_c <- input$c_content[1]
max_c <- input$c_content[2]
sample_data %>%
filter(gc_content <= max_gc) %>%
filter(gc_content >= min_gc) %>%
filter(long_mono_A >= min_a) %>%
filter(long_mono_A <= max_a) %>%
filter(long_mono_T <= max_t) %>%
filter(long_mono_T <= max_t) %>%
filter(long_mono_G <= max_g) %>%
filter(long_mono_G <= max_g) %>%
filter(long_mono_C <= max_c) %>%
filter(long_mono_C <= max_c)
})
output$plot <- renderPlot({
ggplot(df()) + geom_point(aes(x=ensembl_id,y=gc_content))
})
observeEvent(input$add_seq,{
output$showColumns <- renderUI({
column_names <- colnames(sample_data)
selectInput("column_names_seq", "Choose Column for Sequence", head(column_names))
})
})
observeEvent(input$add_length,{
output$updateButton <- renderUI({
actionButton("update", "Update")
})
})
observeEvent(input$update,{
output$table2 <- renderTable(head(df()))
})
}
shinyApp(ui, server)
library(dplyr)
library(tidyverse)
library(ggplot2)
sample_data <- read_csv("sample_data_clean.csv")
head(sample_data)
colnames(sample_data)
library(shiny)
ui <- fluidPage(
navbarPage("App Options:",
tabPanel("Sequence Properties",
titlePanel("Sequence Properties"),
sidebarLayout(
sidebarPanel(
sliderInput("gccontent", "GC Content:",
min = 0, max = 1, value = c(.1, .5)),
sliderInput("a_content", "A mononucleotide longest length:",
min = 5, max = 30 , value = c(0, 100)),
sliderInput("t_content", "T mononucleotide longest length:",
min = 0, max = 30, value = c(0, 100)),
sliderInput("g_content", "G mononucleotide longest length:",
min = 0, max = 30, value = c(0, 100)),
sliderInput("c_content", "C mononucleotide longest length:",
min = 0, max = 30, value = c(0, 100))
),
mainPanel(
plotOutput("plot"),
tableOutput("table")
)
)),
tabPanel("Analyse Sequence",
titlePanel("Analyse Sequence"),
sidebarLayout(
sidebarPanel(
actionButton("add_seq", "Add Sequence Properties"),
uiOutput("showColumns"),
uiOutput("add_length_ui"),
uiOutput("add_mono_ui"),
uiOutput("add_gc_ui")
),
mainPanel(
tableOutput("table2")
)
)
)
))
server <- function(input, output, session) {
## Factor out the head(cars, input$nrows) so that the code isn't
## duplicated and the operation isn't performed twice for each
## change to input$nrows.
df <- reactive({
min_gc <- input$gccontent[1]
max_gc <- input$gccontent[2]
min_a <- input$a_content[1]
max_a <- input$a_content[2]
min_t <- input$t_content[1]
max_t <- input$t_content[2]
min_g <- input$g_content[1]
max_g <- input$g_content[2]
min_c <- input$c_content[1]
max_c <- input$c_content[2]
sample_data %>%
filter(gc_content <= max_gc) %>%
filter(gc_content >= min_gc) %>%
filter(long_mono_A >= min_a) %>%
filter(long_mono_A <= max_a) %>%
filter(long_mono_T <= max_t) %>%
filter(long_mono_T <= max_t) %>%
filter(long_mono_G <= max_g) %>%
filter(long_mono_G <= max_g) %>%
filter(long_mono_C <= max_c) %>%
filter(long_mono_C <= max_c)
})
output$plot <- renderPlot({
ggplot(df()) + geom_point(aes(x=ensembl_id,y=gc_content))
})
observeEvent(input$add_seq,{
output$showColumns <- renderUI({
column_names <- colnames(sample_data)
selectInput("column_names_seq", "Choose Column for Sequence", head(column_names))
})
})
observeEvent(input$add_seq,{
output$add_length_ui <- renderUI({
actionButton("add_length", "Add Length")
})
})
observeEvent(input$add_seq,{
output$add_length_ui <- renderUI({
actionButton("add_mono", "Add Mono Length")
})
})
observeEvent(input$add_seq,{
output$add_gc_ui <- renderUI({
actionButton("add_gc", "Add GC Content")
})
})
observeEvent(input$add_length,{
output$table2 <- renderTable(head(df()))
})
observeEvent(input$add_mono,{
output$table2 <- renderTable(head(df()))
})
observeEvent(input$add_gc,{
output$table2 <- renderTable(head(df()))
})
}
shinyApp(ui, server)
library(dplyr)
library(tidyverse)
library(ggplot2)
sample_data <- read_csv("sample_data_clean.csv")
head(sample_data)
colnames(sample_data)
library(shiny)
ui <- fluidPage(
navbarPage("App Options:",
tabPanel("Sequence Properties",
titlePanel("Sequence Properties"),
sidebarLayout(
sidebarPanel(
sliderInput("gccontent", "GC Content:",
min = 0, max = 1, value = c(.1, .5)),
sliderInput("a_content", "A mononucleotide longest length:",
min = 5, max = 30 , value = c(0, 100)),
sliderInput("t_content", "T mononucleotide longest length:",
min = 0, max = 30, value = c(0, 100)),
sliderInput("g_content", "G mononucleotide longest length:",
min = 0, max = 30, value = c(0, 100)),
sliderInput("c_content", "C mononucleotide longest length:",
min = 0, max = 30, value = c(0, 100))
),
mainPanel(
plotOutput("plot"),
tableOutput("table")
)
)),
tabPanel("Analyse Sequence",
titlePanel("Analyse Sequence"),
sidebarLayout(
sidebarPanel(
actionButton("add_seq", "Add Sequence Properties"),
uiOutput("showColumns"),
uiOutput("add_length_ui"),
uiOutput("add_mono_ui"),
uiOutput("add_gc_ui")
),
mainPanel(
tableOutput("table2")
)
)
)
))
server <- function(input, output, session) {
## Factor out the head(cars, input$nrows) so that the code isn't
## duplicated and the operation isn't performed twice for each
## change to input$nrows.
df <- reactive({
min_gc <- input$gccontent[1]
max_gc <- input$gccontent[2]
min_a <- input$a_content[1]
max_a <- input$a_content[2]
min_t <- input$t_content[1]
max_t <- input$t_content[2]
min_g <- input$g_content[1]
max_g <- input$g_content[2]
min_c <- input$c_content[1]
max_c <- input$c_content[2]
sample_data %>%
filter(gc_content <= max_gc) %>%
filter(gc_content >= min_gc) %>%
filter(long_mono_A >= min_a) %>%
filter(long_mono_A <= max_a) %>%
filter(long_mono_T <= max_t) %>%
filter(long_mono_T <= max_t) %>%
filter(long_mono_G <= max_g) %>%
filter(long_mono_G <= max_g) %>%
filter(long_mono_C <= max_c) %>%
filter(long_mono_C <= max_c)
})
output$plot <- renderPlot({
ggplot(df()) + geom_point(aes(x=ensembl_id,y=gc_content))
})
observeEvent(input$add_seq,{
output$showColumns <- renderUI({
column_names <- colnames(sample_data)
selectInput("column_names_seq", "Choose Column for Sequence", head(column_names))
})
})
observeEvent(input$add_seq,{
output$add_length_ui <- renderUI({
actionButton("add_length", "Add Length")
})
})
observeEvent(input$add_seq,{
output$add_mono_ui <- renderUI({
actionButton("add_mono", "Add Mono Length")
})
})
observeEvent(input$add_seq,{
output$add_gc_ui <- renderUI({
actionButton("add_gc", "Add GC Content")
})
})
observeEvent(input$add_length,{
output$table2 <- renderTable(head(df()))
})
observeEvent(input$add_mono,{
output$table2 <- renderTable(head(df()))
})
observeEvent(input$add_gc,{
output$table2 <- renderTable(head(df()))
})
}
shinyApp(ui, server)
available_seq_prop(sample_data)
available_seq_prop <- function(df_sequence) {
seq_prop = list()
if ("long_mono_A" %in% colnames(df_sequence)) {seq_prop <- rlist::list.append( seq_prop, "long_mono_A")}
if ("long_mono_C" %in% colnames(df_sequence)) {seq_prop <- rlist::list.append( seq_prop, "long_mono_C")}
if ("long_mono_G" %in% colnames(df_sequence)) {seq_prop <- rlist::list.append( seq_prop, "long_mono_G")}
if ("long_mono_T" %in% colnames(df_sequence)) {seq_prop <- rlist::list.append( seq_prop, "long_mono_T")}
if ("gc_content" %in% colnames(df_sequence)) {seq_prop <- rlist::list.append( seq_prop, "gc_content")}
if ("length_seq" %in% colnames(df_sequence)) {seq_prop <- rlist::list.append( seq_prop, "length_seq")}
if(length(seq_prop) == 0 ) {if_seq_prop <- FALSE}
return(list(if_seq_prop, seq_prop))
}
available_seq_prop(sample_data)
sample_data <- read_csv("sample_data.csv")
library(dplyr)
library(tidyverse)
library(ggplot2)
library(Biostrings)
sample_data <- read_csv("sample_data.csv")
colnames(sample_data)
available_seq_prop <- function(df_sequence) {
seq_prop = list()
if ("long_mono_A" %in% colnames(df_sequence)) {seq_prop <- rlist::list.append( seq_prop, "long_mono_A")}
if ("long_mono_C" %in% colnames(df_sequence)) {seq_prop <- rlist::list.append( seq_prop, "long_mono_C")}
if ("long_mono_G" %in% colnames(df_sequence)) {seq_prop <- rlist::list.append( seq_prop, "long_mono_G")}
if ("long_mono_T" %in% colnames(df_sequence)) {seq_prop <- rlist::list.append( seq_prop, "long_mono_T")}
if ("gc_content" %in% colnames(df_sequence)) {seq_prop <- rlist::list.append( seq_prop, "gc_content")}
if ("length_seq" %in% colnames(df_sequence)) {seq_prop <- rlist::list.append( seq_prop, "length_seq")}
if(length(seq_prop) == 0 ) {if_seq_prop <- FALSE}
return(list(if_seq_prop, seq_prop))
}
available_seq_prop(sample_data)
shiny::runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp()
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp()
runApp()
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp()
runApp()
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp()
runApp()
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp()
runApp()
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp()
runApp()
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp()
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp()
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp()
runApp()
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp()
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
packageVersion("rlist")
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
shiny::runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp()
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
runApp('Desktop/STATS290/Project/rnalab/inst/rnalabApp')
devtools::document()
devtools::document()
setwd("~/Desktop/STATS290/Project/rnalab/inst/rnalabApp")
devtools::build()
devtools::install()
shiny::runApp()
runApp()
runApp()
runApp()
library(rnalab)
rnalab_hist_plot(dnaseqs, c('length', 'yield'), 100)
head(dnaseqs)
## GC Content ##
add_sequence_length(dnaseqs,sequence)
library(rnalab)
## GC Content ##
add_sequence_length(dnaseqs,sequence)
## GC Content ##
rnalab::add_sequence_length(dnaseqs,sequence)
## GC Content ##
add_gc_content(dnaseqs,sequence)
## GC Content ##
add_gc_content(dnaseqs,'sequence')
## Longest mononucleotide stretch ##
## GC Content ##
add_gc_content(dnaseqs,'sequence')
## Longest mononucleotide stretch ##
add_mono_nucleotide_length(dnaseqs,'sequence')
devtools::document()
devtools::build()
devtools::install()
## GC Content ##
add_gc_content(dnaseqs,'sequence')
## Longest mononucleotide stretch ##
add_mono_nucleotide_length(dnaseqs,'sequence')
## GC Content ##
add_gc_content(dnaseqs,'sequence')
## Longest mononucleotide stretch ##
add_mono_nucleotide_length(dnaseqs,'sequence')
## Length ##
add_sequence_length(dnaseqs,'sequence')
devtools::build()
devtools::check()
devtools::build()
devtools::install()
rnalab_hist_plot = function(data, vars, nbins){
generate_summary = function(data, var, nbins){
# Verify that input variabe exists as a column name in data
if(! var %in% colnames(data)){
stop('Variable name does not exist in input data. Please select from existing column names.')
}
# Verify that input data is numeric
if(is.numeric(data[[as.character(var)]])){
# Generate summary statistics annotation
sum_stat = summary(data[as.character(var)])
annotation = paste(sum_stat, collapse = ' \n')
# Plot histogram and add summary stats on the right of the plot
plot = ggplot2::ggplot(data = data, mapping = ggplot2::aes_string(x = as.character(var))) +
ggplot2::geom_histogram(bins = nbins) +
ggplot2::theme_bw()
gridExtra::arrangeGrob(plot, right = grid::textGrob(annotation))
} else{
grid::textGrob('Please select a numeric variable to plot')
}
}
gridExtra::marrangeGrob(grobs = lapply(vars, function(x) generate_summary(data, x, nbins)),
nrow = length(vars), ncol = 1, heights=rep(20, length(vars)))
}
rnalab_scatterplot = function(data, x, y, fit=TRUE){
plot = ggplot2::ggplot() +
ggplot2::geom_jitter(data = data, mapping = ggplot2::aes_string(x = as.character(x), y = as.character(y))) +
ggplot2::theme_bw()
if(isTRUE(fit)){
lm = stats::lm(formula = stats::as.formula(paste(as.character(y)," ~ ",as.character(x),collapse='')),
data = data)
intercept = lm$coefficients[['(Intercept)']]
slope = lm$coefficients[[2]]
rsq = summary(lm)$adj.r.squared
lm_fit = data.frame('x_fit' = data[[as.character(x)]]) %>%
dplyr::mutate(y_fit = slope * .data$x_fit + intercept)
legend_slope = paste('Slope: ', round(slope, 3), collapse='')
legend_intercept = paste('Intercept: ', round(intercept, 3), collapse ='')
legend_rsq = paste('R2: ', round(rsq, 3), collapse='')
annotation = paste(legend_slope, legend_intercept, legend_rsq, sep='\n')
plot = plot +
ggplot2::geom_line(data = lm_fit, mapping = ggplot2::aes_string(x='x_fit', y='y_fit'))
plot = gridExtra::grid.arrange(plot, right = grid::textGrob(annotation))
}
plot
}
shiny::runApp()
devtools::check()
runApp()
df <- data.frame("id" = c('ID1','ID2') , "Sequnce_DNA" = c('AAAGGGCTTCCC','AGGGGGTTTCCC'))
df %>% filter(id = 'ID1')
df %>% filter(id == 'ID1')
col_name = 'id'
df %>% filter(col_name == 'ID1')
col_name = 'id'
df %>% filter(!!col_name == 'ID1')
col_name = 'id'
df %>% filter(!!sym(col_name) == 'ID1')
devtools::build()
devtools::install()
runApp()
devtools::check()
devtools::build()
devtools::document()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
shiny::runApp()
runApp()
rnalab::build()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::install()
runApp()
devtools::check()
